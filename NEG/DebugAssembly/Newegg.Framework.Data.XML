<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Newegg.Framework.Data</name>
    </assembly>
    <members>
        <member name="T:Newegg.Framework.DataAccess.ConfigDataCommandFileList">
            <summary>
            configuration that contains the list of DataCommand configuration files.
            This class is for internal use only.
            </summary>
        </member>
        <member name="M:Newegg.Framework.DataAccess.Configuration.DataOperationCommand.GetDataCommand">
            <summary>
            returns a new instance of DataCommand this object represents
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.DataAccess.Configuration.DataOperationCommand.GetDbCommand">
            <summary>
            returns a new instance of DbCommand this object represents
            </summary>
            <returns></returns>
        </member>
        <member name="P:Newegg.Framework.DataAccess.Configuration.DataOperationCommand.CommandText">
            <remarks/>
        </member>
        <member name="P:Newegg.Framework.DataAccess.Configuration.DataOperationCommand.Parameters">
            <remarks/>
        </member>
        <member name="P:Newegg.Framework.DataAccess.Configuration.DataOperationCommand.Name">
            <remarks/>
        </member>
        <member name="P:Newegg.Framework.DataAccess.Configuration.DataOperationCommand.Database">
            <remarks/>
        </member>
        <member name="P:Newegg.Framework.DataAccess.Configuration.DataOperationCommand.CommandType">
            <remarks/>
        </member>
        <member name="P:Newegg.Framework.DataAccess.Configuration.DataOperationCommand.TimeOut">
            <remarks/>
        </member>
        <member name="M:Newegg.Framework.DataAccess.Configuration.DataOperationConfiguration.GetCommandNames">
            <summary>
            returns a list of command names this object contains.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Newegg.Framework.DataAccess.Configuration.DataOperationConfiguration.DataCommandList">
            <remarks/>
        </member>
        <member name="P:Newegg.Framework.DataAccess.Configuration.DataOperationParameter.Name">
            <remarks/>
        </member>
        <member name="P:Newegg.Framework.DataAccess.Configuration.DataOperationParameter.DbType">
            <remarks/>
        </member>
        <member name="P:Newegg.Framework.DataAccess.Configuration.DataOperationParameter.Direction">
            <remarks/>
        </member>
        <member name="P:Newegg.Framework.DataAccess.Configuration.DataOperationParameter.Size">
            <remarks/>
        </member>
        <member name="P:Newegg.Framework.DataAccess.Configuration.DataOperationParameter.Scale">
            <remarks/>
        </member>
        <member name="T:Newegg.Framework.DataAccess.DataCommand">
            <summary>
            
            </summary>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DataCommand.CloneCommand(System.Data.Common.DbCommand)">
            <summary>
            Clones the command.
            </summary>
            <param name="cmd">The CMD.</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DataCommand.CopyCommand(Newegg.Framework.DataAccess.DataCommand)">
            <summary>
            Copies the command from command while keeping the transaction context.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DataCommand.GetParameterValue(System.String)">
            <summary>
            get a parameter value
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DataCommand.SetParameterValue(System.String,System.Object)">
            <summary>
            set a parameter value 
            </summary>
            <param name="paramName"></param>
            <param name="val"></param>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DataCommand.CommitTransaction">
            <summary>
            Commits the transaction.
            </summary>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DataCommand.RollbackTransaction">
            <summary>
            Rolls back the transaction.
            </summary>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DataCommand.ProcessException(System.Exception)">
            <summary>
            Moves to next db.
            returns false if no more db exists.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DataCommand.ExecuteScalar``1">
            <summary>
            Executes the scalar.
            Throws an exception if an error occurs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DataCommand.DoExecuteScalar``1">
            <summary>
            Does the execute scalar.
            two functions:
            log any exception.
            rethrow
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DataCommand.ExecuteScalar">
            <summary>
            Executes the scalar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DataCommand.ExecuteNonQuery">
            <summary>
            returns the number of rows affected.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DataCommand.ExecuteEntity``1">
            <summary>
            Executes the entity.
            Returns null if no entity is returned or the execution failed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DataCommand.ExecuteEntityList``1">
            <summary>
            Executes the entity list.
            Returns an empty list if no entity is returned or the execution fails.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DataCommand.ExecuteDataReader">
            <summary>
            
            </summary>
            <returns></returns>
            <remarks>Use with caution. Remember to dispose the returned reader.</remarks>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DataCommand.ExecuteDataSet">
            <summary>
            Executes the data set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DataCommand.ExecuteDataTable">
            <summary>
            Executes the data table.
            </summary>
            <returns></returns>
            <exception cref="T:System.Exception">when db execute error,throw a exception</exception>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DataCommand.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DataCommand.AddInputParameterWithSize(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            Adds the input parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="dataType">Type of the db.</param>
            <param name="size">The size.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Newegg.Framework.DataAccess.DataCommand.SupportTransaction">
            <summary>
            Gets or sets a value indicating whether this command is executed in a support transaction.
            If the command is executed in a transaction and the transaction is not spcifically committed using CommitTransaction(),
            the underlying transaction will be rolled back.
            </summary>
            <value><c>true</c> if [support transaction]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Newegg.Framework.DataAccess.CustomDataCommand.AddInputParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            Adds the input parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="dataType">Type of the db.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Newegg.Framework.DataAccess.CustomDataCommand.AddInputParameter(System.String,System.Data.DbType)">
            <summary>
            Adds the input parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="dataType">Type of the db.</param>
        </member>
        <member name="M:Newegg.Framework.DataAccess.CustomDataCommand.AddInputParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            Adds the input parameter.
            </summary>
            <param name="name">The name.</param>
            <param name="dataType">Type of the db.</param>
            <param name="size">The size.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Newegg.Framework.DataAccess.DatabaseNotSpecifiedException">
            <summary>
            An exception that occurred when there is no database specified in the configuration file.
            </summary>
        </member>
        <member name="T:Newegg.Framework.DataAccess.DataCommandFileLoadException">
            <summary>
            An exception that occurred when a DataCommand file does not exist or cannot be deserialized.
            </summary>
        </member>
        <member name="T:Newegg.Framework.DataAccess.DataAccessLogger">
            <summary>
            Logs critical information for diagnostics and performance improvement.
            </summary>
        </member>
        <member name="T:Newegg.Framework.DataAccess.DataAccessSetting">
            <summary>
            provide basic runtime environment settings for data access component.
            </summary>
        </member>
        <member name="P:Newegg.Framework.DataAccess.DataAccessSetting.DatabaseConfigFile">
            <summary>
            get the configuration file for database settings
            </summary>
        </member>
        <member name="P:Newegg.Framework.DataAccess.DataAccessSetting.DataCommandFileListConfigFile">
            <summary>
            get the configuration file that contains the list of files for datacommand
            </summary>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DatabaseManager.GetDatabaseInstance(System.String)">
            <summary>
            Gets the database instance.
            lynn 2007-4-21
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DatabaseManager.GetDatabaseGroup(System.String)">
            <summary>
            根据连接字符串获取所属的DatabaseGroup
            </summary>
            <param name="instanceName">连接字符串</param>
            <returns></returns>
        </member>
        <member name="F:Newegg.Framework.DataAccess.DataCommandManager.s_FileCommands">
            <summary>
            records datacommand file and command list relationship
            key: file name
            value: list of datacommand names
            </summary>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DataCommandManager.Watcher_Changed(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            invoked when a file change occurs.
            Note:
            	1. one change at a time.
            	2. if the inventory file changes then all the datacommands are reloaded.
            	3. this function is thread safe.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DataCommandManager.UpdateCommandFile(System.String)">
            <summary>
            
            </summary>
            <param name="m_FileNamePattern"></param>
            <exception cref="T:Newegg.Framework.DataAccess.DataCommandFileLoadException">m_FileNamePattern does not exist or contains invalid information</exception>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DataCommandManager.UpdateAllCommandFiles">
            <summary>
            
            </summary>
            <exception cref="T:Newegg.Framework.DataAccess.DataCommandFileNotSpecifiedException"> if the datacommand file list 
            configuration file does not contain any valid file name.
            </exception>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DataCommandManager.GetDataCommand(System.String)">
            <summary>
            Get DataCommand corresponding to the given command name.
            </summary>
            <param name="name">Name of the DataCommand </param>
            <returns>DataCommand</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">the specified DataCommand does not exist.</exception>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DataCommandManager.GetDataCommand(System.String,System.Boolean)">
            <summary>
            Get DataCommand corresponding to the given command name.
            </summary>
            <param name="name">Name of the DataCommand </param>
            <returns>DataCommand</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">the specified DataCommand does not exist.</exception>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DataCommandManager.RefreshDataCommand(Newegg.Framework.DataAccess.DataCommand,System.String)">
            <summary>
            Refreshes the data command while remaining the command's execution context (db connection, transaction, etc).
            </summary>
            <param name="cmd">The CMD.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Newegg.Framework.DataAccess.DataCommandManager.RefreshDataCommand(Newegg.Framework.DataAccess.DataCommand,Newegg.Framework.DataAccess.DataCommand)">
            <summary>
            Refreshes the data command while remaining the command's execution context (db connection, transaction, etc).
            </summary>
            <param name="command">The command.</param>
            <param name="fromCommand">From command.</param>
        </member>
        <member name="T:Newegg.Framework.DataAccess.HisQueryManager">
            <summary>
            历史查询管理。
            </summary>
        </member>
        <member name="M:Newegg.Framework.DataAccess.HisQueryManager.ProcessHisQueryException(System.Exception)">
            <summary>
            执行历史查询DBRetry检测。
            </summary>
            <returns>
            1) 如果没有找到匹配的数据库连接则返回<b>false</b>。
            2) 否则，对数据库连接字符串循环检测，一旦碰到没有Maintain的数据库则返回<b>true</b>， 否则返回<b>false</b>。
            </returns>
            <remarks>
            为DB Retry作判断，如果返回为<b>true</b>则用当前的连接字符串执行HisQuery
            </remarks>
        </member>
        <member name="M:Newegg.Framework.DataAccess.HisQueryManager.IsHisQueryMaintain(System.String)">
            <summary>
            判断连接字符串对应的数据库是否在维护。
            </summary>
            <param name="connectionString"></param>
            <returns>如果在维护则返回<b>true</b>, 反之返回<b>false</b>。</returns>
        </member>
        <member name="M:Newegg.Framework.DataAccess.HisQueryManager.GetConnectionStringList">
            <summary>
            获取当前HisQueryMaintain数据库命令所对应的数据库连接字符串列表。
            字符串连接集中的顺序：
            1） 先获取当前HisQueryMaintain命令所对应的连接字符串列表。
            2） 再获取当前HisQueryMaintain命令所对应的DatabaseGroup中排除了1)中的所有连接字符串列表。
            </summary>
            <returns>数据库连接字符串列表。</returns>
            <remarks>
            先Retry当前的数据库连接字符串，再顺序Retry当前数据库组中的连接字符串。
            </remarks>
        </member>
        <member name="P:Newegg.Framework.DataAccess.HisQueryManager.HisQueryMaintainDataCommand">
            <summary>
            历史数据库的查询命令。
            </summary>
        </member>
        <member name="P:Newegg.Framework.DataAccess.HisQueryManager.IsHisQuery">
            <summary>
            是对历史数据库的查询。
            </summary>
        </member>
        <member name="P:Newegg.Framework.DataAccess.HisQueryManager.CurrentConnectionString">
            <summary>
            当前的连接字符串。
            </summary>
        </member>
        <member name="F:Newegg.Framework.DataAccess.NeweggDatabase.WEBQuery">
            <remarks/>
        </member>
        <member name="F:Newegg.Framework.DataAccess.NeweggDatabase.SSLQuery">
            <remarks/>
        </member>
        <member name="F:Newegg.Framework.DataAccess.NeweggDatabase.NEWSQL">
            <remarks/>
        </member>
        <member name="F:Newegg.Framework.DataAccess.NeweggDatabase.D2WHP01">
            <remarks/>
        </member>
        <member name="T:Newegg.Framework.Entity.UpperRepository">
            <summary>
            Class UpperRepository.
            </summary>
        </member>
        <member name="F:Newegg.Framework.Entity.UpperRepository.Uppers">
            <summary>
            The uppers.
            </summary>
        </member>
        <member name="M:Newegg.Framework.Entity.UpperRepository.GetUpper(System.String)">
            <summary>
            Gets the upper.
            </summary>
            <param name="original">The original.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Newegg.Framework.Entity.UpperRepository.GenerateUpper(System.String)">
            <summary>
            Generates the upper.
            </summary>
            <param name="original">The original.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Newegg.Framework.Entity.DataReaderEntitySource">
            <summary>
            Data source used to fill an entity. The underlying class is IDataReader.
            Note: remember to call Dispose() after using.
            </summary>
        </member>
        <member name="T:Newegg.Framework.Entity.IEntityDataSource">
            <summary>
            represents a single row of data to populate an entity. 
            IEntityDataSource provides two functions:
            	1. Iterate through all the column names in the row. this is done by the IEnumerable &lt;string&gt; interface.
            		example:
            			IEntityDataSource ds;
            			foreach(string columnName in ds)
            			{
            				...
            			}
            	2. get the value of a specific field in the row. example:
            			IEntityDataSource ds;
            			int CategoryID = ds["CategoryID"];
            
            the common pattern for using this interface is:
            	IEntityDataSource ds;
            	foreach(string columnName in ds)
            	{
            		object val = ds[columnName];
            		// manipulate column name and the field value
            		...
            	}
            </summary>
        </member>
        <member name="M:Newegg.Framework.Entity.IEntityDataSource.ContainsColumn(System.String)">
            <summary>
            indicates if the datasource contains the specified column
            </summary>
            <param name="columnName">column name</param>
            <returns>true if the specified column exists, false otherwise.</returns>
        </member>
        <member name="P:Newegg.Framework.Entity.IEntityDataSource.Item(System.String)">
            <summary>
            returns the data contained in the specified column in the row
            </summary>
            <param name="columnName">column name in the row.</param>
            <returns>the value of the specified field in the row.</returns>
        </member>
        <member name="T:Newegg.Framework.Entity.EntityBuilder">
            <summary>
            Builds an entity.
            </summary>
            <remarks>
            Note to the extenders:
            To enhance performance, many hashtables are used as caches to maintain relevant informantion.
            However, these hashtables do not limit the number of objects stored in them. This will occupy too
            much memory if there is a large number of Entity Definitions. In that case, use cache objects with
            expiration functionality. But keep in mind, performance is our top priority so far ^^;
            </remarks>
        </member>
        <member name="F:Newegg.Framework.Entity.EntityBuilder.s_TypeMappingInfo">
            <summary>
            for each type, contains
            	string:							column name that could bound to a property
            	PropertyDataBindingInfo:		binding info
            </summary>
        </member>
        <member name="F:Newegg.Framework.Entity.EntityBuilder.s_TypeReferencedList">
            <summary>
            for each type, contains:
            	a list of ReferencedTypeBindingInfo that the instance of this type refers to
            </summary>
        </member>
        <member name="F:Newegg.Framework.Entity.EntityBuilder.s_TypePropertyInfo">
            <summary>
            for each type, contains
            	string:					property name
            	DataMappingAttribute:	data mapping attribute for this property
            </summary>
        </member>
        <member name="M:Newegg.Framework.Entity.EntityBuilder.BuildEntity(System.Data.IDataReader,System.Type)">
            <summary>
            Builds the entity.
            An exception will be thrown if failed to build the entity.
            </summary>
            <param name="dr"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Entity.EntityBuilder.BuildEntity(System.Data.DataRow,System.Type)">
            <summary>
            Builds the entity.
            An exception will be thrown if failed to build the entity.
            </summary>
            <param name="dr"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Entity.EntityBuilder.BuildEntity``1(System.Data.IDataReader)">
            <summary>
            Builds the entity.
            An exception will be thrown if failed to build the entity.
            </summary>
            <param name="dr">The dr.</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Entity.EntityBuilder.BuildEntity``1(System.Data.DataRow)">
            <summary>
            Builds the entity.
            An exception will be thrown if failed to build the entity.
            </summary>
            <param name="dr">The dr.</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Entity.EntityBuilder.BuildEntityList``1(System.Data.DataRow[])">
            <summary>
            Builds the entity list.
            Returns an empty list if the rows contains no data.
            An exception will be thrown if failed to build the entity.
            </summary>
            <param name="rows">The rows.</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Entity.EntityBuilder.BuildEntityList``1(System.Data.DataTable)">
            <summary>
            Builds the entity list.
            Returns an empty list if the rows contains no data.
            An exception will be thrown if failed to build the entity.
            </summary>
            <param name="table">The table.</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Entity.EntityBuilder.BuildEntityList4XML``1(System.String,System.String,System.String)">
            <summary>
            Builds the entity list for XML type data.
            Returns an empty list if the rows contains no data.
            An exception will be thrown if failed to build the entity.
            </summary>
            <param name="xml">String.</param>
            <param name="filter">String.</param>
            <param name="sort">String.</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Entity.EntityBuilder.BuildEntityList4XML``1(System.String)">
            <summary>
            Builds the entity list for XML type data.
            Returns an empty list if the rows contains no data.
            An exception will be thrown if failed to build the entity.
            </summary>
            <param name="xml">String</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Entity.EntityBuilder.ValidateData(Newegg.Framework.Entity.EntityBuilder.PropertyDataBindingInfo,System.Object)">
            <summary>
            Validate data binding info.
            Note: type checking is skipped here.
            </summary>
            <param name="bindingInfo"></param>
            <param name="dbValue"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Entity.EntityBuilder.GetPropertyInfo(System.Type,System.String)">
            <summary>
            Get the property binding info.
            Returns null if no relevant binding info is found.
            </summary>
            <param name="type"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Entity.EntityBuilder.GetTypeInfo(System.Type,System.Collections.Generic.Dictionary{System.String,Newegg.Framework.Entity.EntityBuilder.PropertyDataBindingInfo}@,System.Collections.Generic.List{Newegg.Framework.Entity.EntityBuilder.ReferencedTypeBindingInfo}@,System.Collections.Generic.Dictionary{System.String,Newegg.Framework.Entity.DataMappingAttribute}@)">
            <summary>
            If no relevant properties exist, an empty hashtable and list is returned.
            </summary>
            <param name="type"></param>
            <param name="dataMappingInfos"></param>
            <param name="referObjs"></param>
        </member>
        <member name="T:Newegg.Framework.Entity.EntityBuilder.ReferencedTypeBindingInfo">
            <summary>
            Contains data mapping info for a property that is referencing another type.
            </summary>
        </member>
        <member name="P:Newegg.Framework.Entity.EntityBuilder.ReferencedTypeBindingInfo.Type">
            <summary>
            Get the type of the property
            </summary>
        </member>
        <member name="T:Newegg.Framework.Entity.EntityBuilder.PropertyDataBindingInfo">
            <summary>
            Contains data mapping info for a property in a type
            </summary>
        </member>
        <member name="T:Newegg.Framework.XmlAccess.Configuration.ConfigurationManager">
            <summary>
            Provides configuraton info for the newegg site.
            </summary>
        </member>
        <member name="T:Newegg.Framework.XmlAccess.Configuration.ConfigurationManager.InternalConfiguration">
            <summary>
            this is the adaptee class that implemented the actual property interfaces.
            all properties are instance properties.
            </summary>
        </member>
        <member name="F:Newegg.Framework.XmlAccess.XmlDataManager.objectCache">
            <summary>
            Field of objects cache;
            </summary>
        </member>
        <member name="F:Newegg.Framework.XmlAccess.XmlDataManager.tableLocker">
            <summary>
            Field of table locker.
            </summary>
        </member>
        <member name="M:Newegg.Framework.XmlAccess.XmlDataManager.LoadEntityList``1(System.String)">
            <summary>
            Load entity list.
            </summary>
            <typeparam name="T">Type of object.</typeparam>
            <param name="xmlFileName">Parameter of xml file name.</param>
            <returns>Entity list.</returns>
        </member>
        <member name="M:Newegg.Framework.XmlAccess.XmlLoader.LoadXmlDataTable(System.String,System.String,System.Exception@)">
            <summary>
            Loads the data table.
            Returns null if failed to load the xml file.
            </summary>
            <param name="xmlFileName">Name of the XML file.</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.XmlAccess.XmlLoader.LoadDataTable(System.String)">
            <summary>
            Loads the data table.
            </summary>
            <param name="xmlFileName">Name of the XML file.</param>
            <returns></returns>
        </member>
    </members>
</doc>
