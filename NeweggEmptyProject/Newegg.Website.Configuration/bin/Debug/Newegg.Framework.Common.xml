<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Newegg.Framework.Common</name>
    </assembly>
    <members>
        <member name="T:Newegg.Framework.Collection.IKeyedObject`1">
            <summary>
            Represents an object that owns a key and can be uniquely identified by that key in a collection.
            </summary>
        </member>
        <member name="P:Newegg.Framework.Collection.IKeyedObject`1.Key">
            <summary>
            Gets the key that can uniquely identify the object.
            </summary>
        </member>
        <member name="T:Newegg.Framework.Collection.IKeyedObjectCollection`2">
            <summary>
            Represents a collection of IKeyedObject that can be accessed by index. 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Newegg.Framework.Collection.IKeyedObjectCollection`2.GetItemByKey(`0)">
            <summary>
            Gets the item by key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Collection.IKeyedObjectCollection`2.Contains(`0)">
            <summary>
            Indicates if the collection contains an object with the specified key value.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Newegg.Framework.Collection.IKeyedObjectCollection`2.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Newegg.Framework.Collection.IKeyedObjectCollection`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key value.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Newegg.Framework.Collection.KeyedObjectCollection`2">
            <summary>
            Represents a collection of IKeyedObject objects.
            </summary>
            <remarks>
            Note: the implementation of this class uses two classes, namely List and Dictionary, to allow
            	both integer- and string- typed index access. This occupies more memory than usual collection class.
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Newegg.Framework.Collection.KeyedObjectCollection`2.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="!:T"/> class.</para>
            </summary>
        </member>
        <member name="P:Newegg.Framework.Collection.KeyedObjectCollection`2.Item(`0)">
            <summary>
            Returns null if specified key does not exist in the collection.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Newegg.Framework.Collection.Sorting.EntityComparer`1">
            <summary>
            generic comparer class that compares two objects against the give property name.
            if the type of the object's property does not support comparison (i.e. the 
            property's type does not implement IComparable), the two objects will be regarded as 
            being equal.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Newegg.Framework.Collection.Sorting.SortInfo">
            <summary>
            sort information, including the property name and the sort order.
            This class is immutable.
            </summary>
        </member>
        <member name="T:Newegg.Framework.Collection.Sorting.SortOrder">
            <summary>
            sort order for search result.
            </summary>
        </member>
        <member name="T:Newegg.Framework.Configuration.ConfigurationManagerBase">
            <summary>
            Deserialize the configuration file into a runtime object, and monitors the configuration file and 
            reflects any change to the runtime object as well.
            </summary>
            <remarks>
            Note to the extenders:
            Future work:
            	currently, configuration manager relies on System.Web.Caching.Cache to manage configuration objects.
            	MS enterprise library caching component is not used because filedependecy checks file's date every time 
            	an cache item is accessed and thus impose too much IO operations.
            	System.Web.Caching.Cache supports many features and is therefore used here. This, however, restricts the
            	future scalablity and usage scenarios of this component cause the consumer will have to be dependent on 
            	System.Web.dll.
            	Solution: implement a custome filedependy for MS enterprise library that uses FileSystemWatcher to 
            	get notification of file changes rather than actively checking file dates and thus reduces IO operation.
            </remarks>
        </member>
        <member name="M:Newegg.Framework.Configuration.ConfigurationManagerBase.LoadConfiguration``1(System.String,System.String,System.Boolean)">
            <summary>
            if serialization fails, an exception is thrown.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="configFile"></param>
            <param name="needLog"></param>
            <returns></returns>
            <exception cref="T:Newegg.Framework.Configuration.ConfigurationManagerBase.LoadFileException"> when configuration file fails to load</exception>
        </member>
        <member name="M:Newegg.Framework.Configuration.ConfigurationManagerBase.AddToCache(System.String,System.Object,System.String,System.Boolean)">
            <summary>
            Add configuration to cache
            </summary>
            <param name="key">section name defined in the web.config</param>
            <param name="value">configuration object</param>
            <param name="depedencyFile">config file</param>
            <param name="depedencyFile">need Log</param>
        </member>
        <member name="M:Newegg.Framework.Configuration.ConfigurationManagerBase.GetFromCache``1(System.String,System.String,System.Boolean)">
            <summary>
            Get configuration object from cache. If the underlying file changes, the object will be reloaded.
            </summary>
            <typeparam name="T">Type of configuration object</typeparam>
            <param name="key">file name of the configuration object</param>
            <param name="depedencyFile">need Log</param>
            <returns>configuration object</returns>
            <exception cref="T:Newegg.Framework.Configuration.ConfigurationManagerBase.LoadFileException"> when configuration file fails to load</exception>
        </member>
        <member name="F:Newegg.Framework.Globalization.ResourceFileType.resx">
            <summary>
            resx file
            </summary>
        </member>
        <member name="F:Newegg.Framework.Globalization.ResourceFileType.html">
            <summary>
            html file
            </summary>
        </member>
        <member name="F:Newegg.Framework.Globalization.ResourceFileType.aspx">
            <summary>
            aspx file
            </summary>
        </member>
        <member name="F:Newegg.Framework.Globalization.ResourceFileType.txt">
            <summary>
            txt file
            </summary>
        </member>
        <member name="T:Newegg.Framework.Logging.ILogger">
            <summary>
            Log
            </summary>
        </member>
        <member name="T:Newegg.Framework.Threading.HttpContextStorage">
            <summary>
            Implements <see cref="T:Newegg.Framework.Threading.IThreadStorage"/> by using <see cref="T:System.Web.HttpContext"/>
            </summary>
        </member>
        <member name="T:Newegg.Framework.Threading.IThreadStorage">
            <summary>
            Specifies the contract a strategy must be implement to store and 
            retrieve data that is specific to the executing thread.
            </summary>
            <remarks>
            All implementations of this interface must treat keys case-sensitive.
            </remarks>
        </member>
        <member name="M:Newegg.Framework.Threading.IThreadStorage.GetData(System.String)">
            <summary>
            Retrieves an object with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The name of the item.</param>
            <returns>
            The object in the current thread's context associated with the 
            specified <paramref name="name"/> or null if no object has been stored previously
            </returns>
        </member>
        <member name="M:Newegg.Framework.Threading.IThreadStorage.SetData(System.String,System.Object)">
            <summary>
            Stores a given object and associates it with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The name with which to associate the new item.</param>
            <param name="value">The object to store in the current thread's context.</param>
        </member>
        <member name="M:Newegg.Framework.Threading.IThreadStorage.FreeNamedDataSlot(System.String)">
            <summary>
            Empties a data slot with the specified name.
            </summary>
            <remarks>
            If the object with the specified <paramref name="name"/> is not found, the method does nothing.
            </remarks>
            <param name="name">The name of the object to remove.</param>
        </member>
        <member name="M:Newegg.Framework.Threading.HttpContextStorage.GetData(System.String)">
            <summary>
            Retrieves an object with the specified name.
            </summary>
            <param name="name">The name of the item</param>
            <returns>The object in the context associated with the specified name or null if no object has been stored previously</returns>
        </member>
        <member name="M:Newegg.Framework.Threading.HttpContextStorage.SetData(System.String,System.Object)">
            <summary>
            Stores a given object and associates it with the specified name.
            </summary>
            <param name="name">The object with which to associate the new item.</param>
            <param name="value">The object to store in the call context.</param>
        </member>
        <member name="M:Newegg.Framework.Threading.HttpContextStorage.FreeNamedDataSlot(System.String)">
            <summary>
            Empties a data solt with the specified name.
            </summary>
            <param name="name">The name of the data slot to empty.</param>
        </member>
        <member name="T:Newegg.Framework.Threading.HybridContextStorage">
            <summary>
            Implements <see cref="T:Newegg.Framework.Threading.IThreadStorage"/> by using both <see cref="T:System.Web.HttpContext"/> and <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> and choosing dynamically between them.
            </summary>
            <remarks>
            In web applications a single Request may be executed on different threads. In this case HttpContext.Current is the only invariant.<br/>
            This implementation dynamically chooses between <see cref="T:System.Runtime.Remoting.Messaging.CallContext">System.Runtime.Remoting.Messaging.CallContext</see> 
            and <see cref="T:System.Web.HttpContext">System.Web.HttpContext</see> to store data.
            </remarks>
        </member>
        <member name="M:Newegg.Framework.Threading.HybridContextStorage.GetData(System.String)">
            <summary>
            Retrieves an object with the specified name.
            </summary>
            <param name="name">The name of the item.</param>
            <returns>The object in the context associated with the specified name or null if no object has been stored previously</returns>
        </member>
        <member name="M:Newegg.Framework.Threading.HybridContextStorage.SetData(System.String,System.Object)">
            <summary>
            Stores a given object and associates it with the specified name.
            </summary>
            <param name="name">The name with which to associate the new item.</param>
            <param name="value">The object to store in the call context.</param>
        </member>
        <member name="M:Newegg.Framework.Threading.HybridContextStorage.FreeNamedDataSlot(System.String)">
            <summary>
            Empties a data slot with the specified name.
            </summary>
            <param name="name">The name of the data slot to empty.</param>
        </member>
        <member name="T:Newegg.Framework.Threading.LogicalThreadContext">
            <summary>
            An abstraction to safely store "ThreadStatic" data.
            </summary>
            <remarks>
            By default, <see cref="!:CallContext"/> is used to store thread-specific data. 
            You may switch the storage strategy by calling <see cref="M:Newegg.Framework.Threading.LogicalThreadContext.SetStorage(Newegg.Framework.Threading.IThreadStorage)"/>.<p/>
            <b>NOTE:</b> Access to the underlying storage is not synchronized for performance reasons. 
            You should call <see cref="M:Newegg.Framework.Threading.LogicalThreadContext.SetStorage(Newegg.Framework.Threading.IThreadStorage)"/> only once at application startup!
            </remarks>
        </member>
        <member name="F:Newegg.Framework.Threading.LogicalThreadContext.threadStorage">
            <summary>
            Holds the current <see cref="T:Newegg.Framework.Threading.IThreadStorage"/> strategy.
            </summary>
            <remarks>
            Access to this variable is not synchronized on purpose for performance reasons. 
            Setting a different <see cref="T:Newegg.Framework.Threading.IThreadStorage"/> strategy should happen only once
            at application startup.
            </remarks>
        </member>
        <member name="M:Newegg.Framework.Threading.LogicalThreadContext.SetStorage(Newegg.Framework.Threading.IThreadStorage)">
            <summary>
            Set the new <see cref="T:Newegg.Framework.Threading.IThreadStorage"/> strategy.
            </summary>
        </member>
        <member name="M:Newegg.Framework.Threading.LogicalThreadContext.GetData(System.String)">
            <summary>
            Retrieves an object with the specified name.
            </summary>
            <param name="name">The name of the item.</param>
            <returns>The object in the context associated with the specified name or null if no object has been stored previously</returns>
        </member>
        <member name="M:Newegg.Framework.Threading.LogicalThreadContext.SetData(System.String,System.Object)">
            <summary>
            Stores a given object and associates it with the specified name.
            </summary>
            <param name="name">The name with which to associate the new item.</param>
            <param name="value">The object to store in the current thread's context.</param>
        </member>
        <member name="M:Newegg.Framework.Threading.LogicalThreadContext.FreeNamedDataSlot(System.String)">
            <summary>
            Empties a data slot with the specified name.
            </summary>
            <param name="name">The name of the data slot to empty.</param>
        </member>
        <member name="T:Newegg.Framework.Threading.ThreadStaticStorage">
            <summary>
            Implements <see cref="T:Newegg.Framework.Threading.IThreadStorage"/> by using a <see cref="T:System.ThreadStaticAttribute"/> hashtable.
            </summary>
        </member>
        <member name="M:Newegg.Framework.Threading.ThreadStaticStorage.GetData(System.String)">
            <summary>
            Retrieves an object with the specified name.
            </summary>
            <param name="name">The name of the item.</param>
            <returns>The object in the call context associated with the specified name or null if no object has been stored previously</returns>
        </member>
        <member name="M:Newegg.Framework.Threading.ThreadStaticStorage.SetData(System.String,System.Object)">
            <summary>
            Stores a given object and associates it with the specified name.
            </summary>
            <param name="name">The name with which to associate the new item.</param>
            <param name="value">The object to store in the call context.</param>
        </member>
        <member name="M:Newegg.Framework.Threading.ThreadStaticStorage.FreeNamedDataSlot(System.String)">
            <summary>
            Empties a data slot with the specified name.
            </summary>
            <param name="name">The name of the data slot to empty.</param>
        </member>
        <member name="T:Newegg.Framework.Utility.AntiXssEncoder">
            <summary>
            <c>AntiXssEncoder</c> can be used to provide additional protection to ASP.NET Web-based applications against Cross-Site Scripting (XSS) attacks.
            <remarks>
            <para>
            To provide this protection, the library first defines a set of valid characters such as a-z and 
            A-Z and automatically encodes any characters not defined in that valid set (invalid characters or potential attack characters).
            This technique is commonly referred to as the principle of inclusions and can provide advantages over other techniques.
            Cross-site scripting (XSS) attacks exploit vulnerabilities in Web-based applications that fail to properly validate and/or encode input that is embedded in response data.  
            Malicious users can then inject client-side script into response data causing the unsuspecting user's browser to execute the script code.  
            The script code will appear to have originated from a trusted-site and may be able to bypass browser protection mechanisms such as security zones.
            These attacks are platform and browser independent, and can allow malicious users to perform malicious actions such as gaining unauthorized access 
            to client data like cookies or hijacking sessions entirely.
            <para />
            Simple steps that developers can take to prevent XSS attacks in their ASP.NET applications include 
            (see How To: Prevent Cross-Site Scripting in ASP.NET in the Patterns &amp; Practices series for more detail):
            <list type="bullet">
            	<item>Validating and constraining input</item>
            	<item>Encoding output</item>
            </list>
            </para>
            <para />
            <para>
            To properly use the Microsoft Anti-Cross Site Scripting Library to protect their ASP.NET Web-applications, developers need to:
            <list type="bullet">
            	<item>Step 1: Review ASP.NET code that generates output</item>
            	<item>Step 2: Determine whether output includes un-trusted input parameters</item>
            	<item>Step 3: Determine the context which the un-trusted input is used as output</item>
            	<item>Step 4: Encode output</item>
            </list>
            </para>
            <para>
            <b>Step 1: Review ASP.NET Code that Generates Output</b>
            XSS attacks are dependent on the ability of un-trusted input to be embedded as output, and so code that generates output must first be identified.  
            Some common vectors include calls to Response.Write and ASP &lt;% = calls.
            </para>
            <para>
            <b>Step 2: Determine if Output Could Contain Un-Trusted Input</b>
            Once the sections of code that generate output have been identified, they should be analysed to determined if the output may contain un-trusted input such as input from users or from some other un-trusted source.  If the output does contain un-trusted input then that un-trusted input will require encoding.  Some common sources of un-trusted input include:
            <list type="bullet">
            	<item>Application variables</item>
            	<item>Cookies</item>
            	<item>Databases</item>
            	<item>Form fields</item>
            	<item>Query string variables</item>
            	<item>Session variables</item>
            </list>
            If it is uncertain that the output may contain un-trusted input, then it is best to err on the side of caution and encode the output anyways.
            </para>
            <para>
            <b>Step 3: Determine Encoding Method to Use</b>
            <list type="table">
                <listheader>
                    <term>Encoding Method</term>
                    <term>Description</term>
                </listheader>
                <item>
                    <description>HtmlEncode</description>
                    <description>Encodes input strings for use in HTML</description>
                </item>
                <item>
                    <description>HtmlAttributeEncode</description>
                    <description>Encodes input strings for use in HTML attributes</description>
                </item>
                <item>
                    <description>JavaScriptEncode</description>
                    <description>Encodes input strings for use in JavaScript</description>
                </item>
                <item>
                    <description>UrlEncode</description>
                    <description>Encodes input strings for use in Universal Resource Locators (URLs)</description>
                </item>
                <item>
                    <description>XmlEncode</description>
                    <description>Encodes input strings for use in XML</description>
                </item>
                <item>
                    <description>XmlAttributeEncode</description>
                    <description>Encodes input strings for use in XML attributes</description>
                </item>
            </list>
            </para>
            <para>
            <b>Step 4: Encode Output</b>
            </para>
            </remarks>
            </summary>
        </member>
        <member name="T:Newegg.Framework.Utility.ArrayUtils">
            <summary>
            Various utility methods relating to the manipulation of arrays.
            </summary>
        </member>
        <member name="M:Newegg.Framework.Utility.ArrayUtils.HasLength(System.Collections.ICollection)">
            <summary>
            Checks if the given array or collection is null or has no elements.
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Utility.ArrayUtils.AreEqual(System.Array,System.Array)">
            <summary>
            Tests equality of two single-dimensional arrays by checking each element
            for equality.
            </summary>
            <param name="a">The first array to be checked.</param>
            <param name="b">The second array to be checked.</param>
            <returns>True if arrays are the same, false otherwise.</returns>
        </member>
        <member name="M:Newegg.Framework.Utility.ArrayUtils.GetHashCode(System.Array)">
            <summary>
            Returns hash code for an array that is generated based on the elements.
            </summary>
            <remarks>
            Hash code returned by this method is guaranteed to be the same for
            arrays with equal elements.
            </remarks>
            <param name="array">
            Array to calculate hash code for.
            </param>
            <returns>
            A hash code for the specified array.
            </returns>
        </member>
        <member name="M:Newegg.Framework.Utility.ArrayUtils.ToString(System.Array)">
            <summary>
            Returns string representation of an array.
            </summary>
            <param name="array">
            Array to return as a string.
            </param>
            <returns>
            String representation of the specified <paramref name="array"/>.
            </returns>
        </member>
        <member name="T:Newegg.Framework.Utility.AssertUtils">
            <summary>
            Assertion utility methods that simplify things such as argument checks.
            </summary>
            <remarks>
            <p>
            Not intended to be used directly by applications.
            </p>
            </remarks>
            <author>Aleksandar Seovic</author>
            <version>$Id: AssertUtils.cs,v 1.13 2008/03/14 10:45:08 bbaia Exp $</version>
        </member>
        <member name="M:Newegg.Framework.Utility.AssertUtils.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Checks the value of the supplied <paramref name="argument"/> and throws an
            <see cref="T:System.ArgumentNullException"/> if it is <see langword="null"/>.
            </summary>
            <param name="argument">The object to check.</param>
            <param name="name">The argument name.</param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="argument"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Newegg.Framework.Utility.AssertUtils.ArgumentNotNull(System.Object,System.String,System.String)">
            <summary>
            Checks the value of the supplied <paramref name="argument"/> and throws an
            <see cref="T:System.ArgumentNullException"/> if it is <see langword="null"/>.
            </summary>
            <param name="argument">The object to check.</param>
            <param name="name">The argument name.</param>
            <param name="message">
            An arbitrary message that will be passed to any thrown
            <see cref="T:System.ArgumentNullException"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="argument"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Newegg.Framework.Utility.AssertUtils.ArgumentHasText(System.String,System.String)">
            <summary>
            Checks the value of the supplied string <paramref name="argument"/> and throws an
            <see cref="T:System.ArgumentNullException"/> if it is <see langword="null"/> or
            contains only whitespace character(s).
            </summary>
            <param name="argument">The string to check.</param>
            <param name="name">The argument name.</param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="argument"/> is <see langword="null"/> or
            contains only whitespace character(s).
            </exception>
        </member>
        <member name="M:Newegg.Framework.Utility.AssertUtils.ArgumentHasText(System.String,System.String,System.String)">
            <summary>
            Checks the value of the supplied string <paramref name="argument"/> and throws an
            <see cref="T:System.ArgumentNullException"/> if it is <see langword="null"/> or
            contains only whitespace character(s).
            </summary>
            <param name="argument">The string to check.</param>
            <param name="name">The argument name.</param>
            <param name="message">
            An arbitrary message that will be passed to any thrown
            <see cref="T:System.ArgumentNullException"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="argument"/> is <see langword="null"/> or
            contains only whitespace character(s).
            </exception>
        </member>
        <member name="M:Newegg.Framework.Utility.AssertUtils.ArgumentHasLength(System.Collections.ICollection,System.String)">
            <summary>
            Checks the value of the supplied <see cref="T:System.Collections.ICollection"/> <paramref name="argument"/> and throws
            an <see cref="T:System.ArgumentNullException"/> if it is <see langword="null"/> or contains no elements.
            </summary>
            <param name="argument">The array or collection to check.</param>
            <param name="name">The argument name.</param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="argument"/> is <see langword="null"/> or
            contains no elements.
            </exception>
        </member>
        <member name="M:Newegg.Framework.Utility.AssertUtils.ArgumentHasLength(System.Collections.ICollection,System.String,System.String)">
            <summary>
            Checks the value of the supplied <see cref="T:System.Collections.ICollection"/> <paramref name="argument"/> and throws
            an <see cref="T:System.ArgumentNullException"/> if it is <see langword="null"/> or contains no elements.
            </summary>
            <param name="argument">The array or collection to check.</param>
            <param name="name">The argument name.</param>
            <param name="message">An arbitrary message that will be passed to any thrown <see cref="T:System.ArgumentNullException"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="argument"/> is <see langword="null"/> or
            contains no elements.
            </exception>
        </member>
        <member name="M:Newegg.Framework.Utility.AssertUtils.AssertArgumentType(System.Object,System.String,System.Type,System.String)">
            <summary>
            Checks whether the specified <paramref name="argument"/> can be cast 
            into the <paramref name="requiredType"/>.
            </summary>
            <param name="argument">
            The argument to check.
            </param>
            <param name="argumentName">
            The name of the argument to check.
            </param>
            <param name="requiredType">
            The required type for the argument.
            </param>
            <param name="message">
            An arbitrary message that will be passed to any thrown
            <see cref="T:System.ArgumentException"/>.
            </param>
        </member>
        <member name="M:Newegg.Framework.Utility.Converter.ToInt32(System.Object,System.Int32)">
            <summary>
            Converts the input value to an int32.
            If the input is null or cannot be converted to the target type, defaultValue is returned.
            </summary>
            <param name="input">The input.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Utility.CustomStringJoiner.JoinString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Joins the string.
            </summary>
            <param name="collection">The collection.</param>
            <param name="delimiter">The delimiter.</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Utility.Data.DataTableHelper.GetUniquedTableColumnsByColumnName``1(``0,System.String)">
            <summary>
            Gets the name of the uniqued table columns by column.
            </summary>
            <param name="dataRowCollection">The data row collection.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Utility.Data.DataTableHelper.GetUniquedTableColumnsCountByColumnName``1(``0,System.String)">
            <summary>
            Gets the name of the uniqued table columns count by column.
            </summary>
            <param name="dataRowCollection">The data row collection.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Utility.Data.DataTableHelper.GetTableFromDataRowArray(System.Data.DataRow[])">
            <summary>
            Gets the table from data row array.
            </summary>
            <param name="rows">The rows.</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Utility.Data.DataTableHelper.HasRowsInDataTable(System.Data.DataTable)">
            <summary>
            Determines whether [has rows in data table] [the specified table].
            </summary>
            <param name="table">The table.</param>
            <returns>
            	<c>true</c> if [has rows in data table] [the specified table]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newegg.Framework.Utility.Data.DataTableHelper.HasRowsInDataTable(System.Data.DataTable,System.String,System.String)">
            <summary>
            Determines whether [has rows in data table] [the specified table].
            </summary>
            <param name="table">The table.</param>
            <param name="columnName">Name of the column.</param>
            <param name="columnValue">The column value.</param>
            <returns>
            	<c>true</c> if [has rows in data table] [the specified table]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Newegg.Framework.Utility.Data.DataTableHelper.GetSelectdRowsFromTable(System.Data.DataTable,System.String)">
            <summary>
            Gets the selectd rows from table.
            </summary>
            <param name="orginalTable">The orginal table.</param>
            <param name="selectedCondition">The selected condition.</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Utility.Data.DataTableHelper.GetScalarByColumnName(System.Data.DataTable,System.String,System.String)">
            <summary>
            Gets the scalar by column name from table.
            </summary>
            <param name="sourceTable">The source table.</param>
            <param name="filter">The filter.</param>
            <param name="columnName">Name of the column.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Newegg.Framework.Utility.EnumHelper" -->
        <member name="M:Newegg.Framework.Utility.EnumHelper.GetEnumItems(System.Type)">
            <summary>
            get the enum's all list
            </summary>
            <param name="enumType">枚举的类型</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Utility.EnumHelper.GetEnumItemsWithAll(System.Type)">
            <summary>
            获得枚举类型所包含的全部项的列表，包含"All"。
            </summary>
            <param name="enumType">the type of the enum</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Utility.EnumHelper.GetEnumItems(System.Type,System.Boolean)">
            <summary>
            get the enum's all list
            </summary>
            <param name="enumType">the type of the enum</param>
            <param name="withAll">identicate whether the returned list should contain the all item</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Utility.EnumHelper.GetEnumValueDescription``1(``0)">
            <summary>
            the the enum value's descrption attribute information
            </summary>
            <param name="enumType">the type of the enum</param>
            <param name="value">the enum value</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Utility.EnumHelper.GetEnumValueByDescription``1(System.String)">
            <summary>
            get the enum value's int mode value
            </summary>
            <param name="enumType">the type of the enum</param>
            <param name="value">the enum value's descrption</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Utility.EnumHelper.GetEnumByDescription``1(System.String)">
            <summary>
            get the Enum value according to the its decription
            </summary>
            <param name="enumType">the type of the enum</param>
            <param name="value">the description of the EnumValue</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Utility.EnumHelper.GetEnumByName``1(System.String)">
            <summary>
            get the description attribute of a Enum value
            </summary>
            <param name="enumType">the type of the enum</param>
            <param name="value">enum value name</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Utility.FileSystemChangeEventHandler.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Newegg.Framework.Utility.FileSystemChangeEventHandler"/> class.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="isFolderChange">if set to <c>true</c> [if the Watcher is to folder change].</param>
        </member>
        <member name="T:Newegg.Framework.Utility.ObjectSoapSerializer">
            <summary>
            serializer using SoapFormatter
            </summary>
        </member>
        <member name="M:Newegg.Framework.Utility.ObjectSoapSerializer.Serialize(System.Object)">
            <summary>
            Serializes the specified o.
            </summary>
            <param name="o">The o.</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Utility.ObjectSoapSerializer.Deserialize``1(System.String)">
            <summary>
            Deserializes the specified MSG.
            returns null if failed.
            </summary>
            <param name="msg">The MSG.</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Utility.ObjectXmlSerializer.LoadFromXml``1(System.String)">
            <summary>
            deserialize an object from a file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="m_FileNamePattern"></param>
            <returns>
            Null is returned if any error occurs.
            </returns>
        </member>
        <member name="M:Newegg.Framework.Utility.ObjectXmlSerializer.LoadFromXml``1(System.String,System.Boolean)">
            <summary>
            deserialize an object from a file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fileName"></param>
            <param name="needLog"></param>
            <returns>
             Null is returned if any error occurs.
            </returns>
        </member>
        <member name="M:Newegg.Framework.Utility.ObjectXmlSerializer.ToXML``1(``0)">
            <summary>
            serialize an object to a file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message"></param>
            <returns>
            Null is returned if any error occurs.
            </returns>
        </member>
        <member name="T:Newegg.Framework.Utility.PerformanceTracer">
            <summary>
            trace performance by key
            </summary>
        </member>
        <member name="M:Newegg.Framework.Utility.PerformanceTracer.#ctor">
            <summary>
            Structure
            </summary>
        </member>
        <member name="M:Newegg.Framework.Utility.PerformanceTracer.#ctor(System.Int32)">
            <summary>
            Structure
            </summary>
            <param name="minMilliseconds">Only time-consuming than minMilliseconds event will be recorded</param>
        </member>
        <member name="F:Newegg.Framework.Utility.PerformanceTracer.m_minMilliseconds">
            <summary>
            Only time-consuming than minMilliseconds event will be recorded
            </summary>
        </member>
        <member name="F:Newegg.Framework.Utility.PerformanceTracer.m_TraceMessageBuilder">
            <summary>
            Trace message builder
            </summary>
        </member>
        <member name="F:Newegg.Framework.Utility.PerformanceTracer.m_Start">
            <summary>
            Start time dictionary
            </summary>
        </member>
        <member name="F:Newegg.Framework.Utility.PerformanceTracer.m_level">
            <summary>
            trace level
            </summary>
        </member>
        <member name="M:Newegg.Framework.Utility.PerformanceTracer.TraceBegin(System.String)">
            <summary>
            Add trace
            </summary>
            <param name="key">trace key</param>
        </member>
        <member name="M:Newegg.Framework.Utility.PerformanceTracer.TraceEnd(System.String)">
            <summary>
            close trace and record message
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Newegg.Framework.Utility.PerformanceTracer.TraceEnd(System.String,System.Int32)">
            <summary>
            close trace and record message
            </summary>
            <param name="key">key</param>
            <param name="minMilliseconds">Only time-consuming than minMilliseconds event will be recorded</param>
        </member>
        <member name="P:Newegg.Framework.Utility.PerformanceTracer.TraceMessage">
            <summary>
            Trace message
            </summary>
        </member>
        <member name="M:Newegg.Framework.Utility.StringHelper.GetLeftString(System.String,System.Int32)">
            <summary>
            Gets the left string.
            </summary>
            <param name="description">The description.</param>
            <param name="leftLength">Length of the left.</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Utility.StringHelper.GetRightString(System.String,System.Int32)">
            <summary>
            Gets the right string.
            </summary>
            <param name="description">The description.</param>
            <param name="leftLength">Length of the left.</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Utility.StringHelper.Trim(System.Object)">
            <summary>
            Trims the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>return trim value,if value can convert to string;otherwise,return null.</returns>
        </member>
        <member name="M:Newegg.Framework.Utility.StringHelper.FilterBlankControlString(System.String)">
            <summary>
            Filters the blank control string.
            </summary>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Utility.StringHelper.GetSeparationStringByComma(System.Collections.ICollection)">
            <summary>
            Gets the separation string by comma.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Utility.StringHelper.GetSeparationStringByCommaAndSingleQuotes(System.Collections.ICollection)">
            <summary>
            Gets the separation string by comma and single quotes.
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Framework.Utility.StringHelper.MultiLangFormatString(System.String,System.String)">
            <summary>
            get the string by the current language code
            </summary>
            <param name="defaultString">the default string.not include {Lang} tab.</param>
            <param name="multiLangString">the multilang format string,include {Lang} tab.</param>
            <returns>the formated string</returns>
        </member>
    </members>
</doc>
